$(document).ready(function() {
    // If the fault_plotA id does not exist, no chart to display
    if ($("#faultPhaseA").length == 0 && $("#fault_plot").length == 0)
        return;
    load_fault_data();

    // Handle radio button selection
    $("body").delegate(":radio", "click", function() {
        load_fault_data();
    });

}); // end document ready

var faultTime;

var pmode; // persistant mode, hack to get radio buttons checking to work

var optionsA = {
    legend: { show: true, container: null },
    series: {
        lines: { show: true },
        points: { show: false }
    },
    yaxes: [{ position: "left", ticks: 10, color: "#FF1100", tickColor: "#000000" },
        { position: "left", ticks: 10, color: "#0033FF" }
    ],
    xaxis: { ticks: 10, color: "#000000" },
    selection: { mode: "x" }
};

var optionsB = {
    legend: { show: true, container: null },
    series: {
        lines: { show: true },
        points: { show: false }
    },
    yaxis: { ticks: 10, color: "#000000" },
    xaxis: { ticks: 10, color: "#000000" },
    selection: { mode: "xy" }
};

var plot, plot2, plot3, plot4, plot5;

/**
 * Load data for charts
 */
function load_fault_data() {
    // Form the link to be used...
    $url = base_url + 'index.php/fault_viewer/get_fault_data/' + fault_file;

    // Get a date and time if set...
    var $timestamp = $("#date").val() + ' ' + $("#time").val();

    $("#dataloadtime").html("DataReader Request Pending...");
    faultTime = new Date();

    // Send to server, handle json response    
    $.post($url, { timestamp: $timestamp }, function(data) {

        $("#dataloadtime").html("DataReader Request Received... Parsing...");

        if (data == '')
            $("#dataloadtime").html("DataReader Request Parse Error... No DataReader!");

        var allData = jQuery.parseJSON(data);

        if (allData == null)
            return;
        if (sensor_type == 'Transformer') {
            var va = allData.voltageA;
            var vb = allData.voltageB;
            var vc = allData.voltageC;
            var ia = allData.currentA;
            var ib = allData.currentB;
            var ic = allData.currentC;
        } else if (sensor_type == 'Feeder') {
            var voltage = allData.voltage;
            var current = allData.current;
            var faultCurrent = allData.faultCurrent;
        }

        // Handle timestamps
        //var timeStep = 1.0 / 60.0 / samples_per_cycle * 1000.0;   // ms
        if (sensor_type == 'Transformer') {
            var vaa = [];
            var vbb = [];
            var vcc = [];
            var iaa = [];
            var ibb = [];
            var icc = [];
            // Convert data and build time index based on samples_per_cycle
            for (x in va)
                vaa.push([x, va[x]]);
            for (x in vb)
                vbb.push([x, vb[x]]);
            for (x in vc)
                vcc.push([x, vc[x]]);
            for (x in ia)
                iaa.push([x, ia[x]]);
            for (x in ib)
                ibb.push([x, ib[x]]);
            for (x in ic)
                icc.push([x, ic[x]]);
        } else if (sensor_type == 'Feeder') {
            var dT = 1000 / 2048;
            var cyc4 = 4 * 1000 / 60;
			var voltage2 = [];
			var current2 = [];
			var faultCurrent2 = [];
            // Convert data and build time index based on samples_per_cycle
            for (x in voltage)
                voltage2.push([x * dT - cyc4, voltage[x]]);
            for (x in current)
                current2.push([x * dT - cyc4, current[x]]);
            for (x in faultCurrent)
                faultCurrent2.push([x * dT - cyc4, faultCurrent[x]]);
        }

        // Plot according to selected display option 
        var mode = $(":checked").val();
        if (sensor_type == 'Transformer') {
            if (mode == 'phase') {
                optionsA.legend.container = '#legendcontainerA';
                plot = $.plot($("#fault_plotA"), [
                    { label: "Voltage", data: vaa, color: 2, yaxis: 1 },
                    { label: "dA/dt", data: iaa, color: "#0033FF", yaxis: 2 }
                ], optionsA);

                optionsA.legend.container = '#legendcontainerB';
                plot2 = $.plot($("#fault_plotB"), [
                    { label: "Voltage", data: vbb, color: 2, yaxis: 1 },
                    { label: "dA/dt", data: ibb, color: "#0033FF", yaxis: 2 }
                ], optionsA);
    
                optionsA.legend.container = '#legendcontainerC';
                plot3 = $.plot($("#fault_plotC"), [
                    { label: "Voltage", data: vcc, color: 2, yaxis: 1 },
                    { label: "dA/dt", data: icc, color: "#0033FF", yaxis: 2 }
                ], optionsA);

                // Show phase plots
                $("#faultPhaseA").show();
                $("#fault_plotA").show();
                $("#legendcontainerA").show();

                $("#faultPhaseB").show();
                $("#fault_plotB").show();
                $("#legendcontainerB").show();

                $("#faultPhaseC").show();
                $("#fault_plotC").show();
                $("#legendcontainerC").show();

                // Hide voltage and current plots
                $("#faultVoltage").hide();
                $("#fault_plot_voltage").hide();
                $("#legendcontainerVoltage").hide();
                $("#faultCurrent").hide();
                $("#fault_plot_current").hide();
                $("#legendcontainerCurrent").hide();

                faultZoom3TM(vaa, vbb, vcc, iaa, ibb, icc);
            }
            if (mode == 'vandi') {
                optionsB.legend.container = '#legendcontainerVoltage';
                plot4 = $.plot($("#fault_plot_voltage"), [
                    { label: "Phase A", data: vaa, color: 2 },
                    { label: "Phase B", data: vbb, color: "#0033FF" },
                    { label: "Phase C", data: vcc, color: 3 }
                ], optionsB);

                optionsB.legend.container = '#legendcontainerCurrent';
                plot5 = $.plot($("#fault_plot_current"), [
                    { label: "Phase A", data: iaa, color: 2 },
                    { label: "Phase B", data: ibb, color: "#0033FF" },
                    { label: "Phase C", data: icc, color: 3 }
                ], optionsB);
                // Hide phase plots 
                $("#faultPhaseA").hide();
                $("#fault_plotA").hide();
                $("#legendcontainerA").hide();
                $("#faultPhaseB").hide();
                $("#fault_plotB").hide();
                $("#legendcontainerB").hide();

                $("#faultPhaseC").hide();
                $("#fault_plotC").hide();
                $("#legendcontainerC").hide();

                // Show voltage and current plots
                $("#faultVoltage").show();
                $("#fault_plot_voltage").show();
                $("#legendcontainerVoltage").show();
                $("#faultCurrent").show();
                $("#fault_plot_current").show();
                $("#legendcontainerCurrent").show();
                
                faultZoom2TM(vaa, vbb, vcc, iaa, ibb, icc);
            }
        } else if (sensor_type == 'Feeder') {
            if (mode == 'overlay') {
                optionsA.legend.container = '#legendcontainerA';		
                plot = $.plot($("#fault_plot"), [
                    { label: "Current", data: current2, color: "#0033FF", yaxis: 2 },
                    { label: "Voltage", data: voltage2, color: 2, yaxis: 1 },
                    { label: "Fault Current", data: faultCurrent2, color: "#F25C05", yaxis: 3 }
                ], optionsA);

                // Show fault
                $("#faultHeading").show();
                $("#fault_plot").show();
                $("#legendcontainerA").show();

                // Hide individual plots
                $("#voltagePlotHeading").hide();
                $("#voltage_plot").hide();
                $("#legendcontainerB").hide();
                $("#currentPlotHeading").hide();
                $("#current_plot").hide();
                $("#legendcontainerC").hide();
                $("#faultCurrentHeading").hide();
                $("#fault_current_plot").hide();
                $("#legendContainerD").hide();

                faultZoomFM(voltage2, current2, faultCurrent2);
            } else {
                optionsB.legend.container = '#legendcontainerB';
                plot2 = $.plot($("#voltage_plot"), [
                    { label: "Voltage", data: voltage2, color: 2 }
                ], optionsB);

                optionsB.legend.container = '#legendcontainerC';
                plot3 = $.plot($("#current_plot"), [
                    { label: "Current", data: current2, color: "#0033FF" }
                ], optionsB);

                optionsB.legend.container = '#legendContainerD';
                plot4 = $.plot($("#fault_current_plot"), [
                    { label: "Fault Current", data: faultCurrent2, color: "#F25C05" }
                ], optionsB);

                // Show individual plots
                $("#voltagePlotHeading").show();
                $("#voltage_plot").show();
                $("#legendcontainerB").show();
                $("#currentPlotHeading").show();
                $("#current_plot").show();
                $("#legendcontainerC").show();
                $("#faultCurrentHeading").show();
                $("#fault_current_plot").show();
                $("#legendContainerD").show();

                // Hide overlay
                $("#faultHeading").hide();
                $("#fault_plot").hide();
                $("#legendcontainerA").hide();

                faultZoom3FM(voltage2, current2, faultCurrent2);
            }
        }

        var timedone = new Date();
        timedone = timedone.getTime();
        timestart = faultTime.getTime();

        $("#dataloadtime").html("DataReader Request Complete " + (timedone - timestart) / 1000 + " seconds.");

        // Append message if there is no data to display
        if (sensor_type == 'Transformer') {
            if (va.length == 0 && vb.length == 0 && vc.length == 0 && ia.length == 0 && ib.length == 0 && ic.length == 0)
                faultSetErrorMsgTM();
        } else if (sensor_type == 'Feeder') {
            if (voltage.length == 0 && current.length == 0 && faultCurrent.length == 0)
                faultSetErrorMsgFM();
        }

    }); // end $.post
}

function faultSetErrorMsgTM() {
    $("#fault_plotA").append(
        '<div class="notice" style="text-align: center; position: relative; left: 10px; top: -200px; width: 91%"> \n\
    No DataReader Available for Specified Time Period! \n\
    </div>'
    );

    $("#fault_plotB").append(
        '<div class="notice" style="text-align: center; position: relative; left: 10px; top: -200px; width: 91%"> \n\
    No DataReader Available for Specified Time Period! \n\
    </div>'
    );

    $("#fault_plotC").append(
        '<div class="notice" style="text-align: center; position: relative; left: 10px; top: -200px; width: 91%"> \n\
    No DataReader Available for Specified Time Period! \n\
    </div>'
    );
}

function faultSetErrorMsgFM() {
    $("#fault_plot").append(
        '<div class="notice" style="text-align: center; position: relative; left: 10px; top: -200px; width: 91%"> \n\
    No DataReader Available! \n\
    </div>'
    );

    $("#voltage_plot").append(
        '<div class="notice" style="text-align: center; position: relative; left: 10px; top: -200px; width: 91%"> \n\
    No DataReader Available! \n\
    </div>'
    );

    $("#current_plot").append(
        '<div class="notice" style="text-align: center; position: relative; left: 10px; top: -200px; width: 91%"> \n\
    No DataReader Available! \n\
    </div>'
    );

    $("#fault_current_plot").append(
        '<div class="notice" style="text-align: center; position: relative; left: 10px; top: -200px; width: 91%"> \n\
    No DataReader Available! \n\
    </div>'
    );
}

/**
 * Select range for zooming
 */
function getFaultDataTM(x1, x2, vaa, vbb, vcc, iaa, ibb, icc) {

    var vaaa = [];
    var vbbb = [];
    var vccc = [];
    var iaaa = [];
    var ibbb = [];
    var iccc = [];
    for (x in vaa) {
        var index = vaa[x][0];
        if (index > x1 && index < x2) {
            vaaa.push(vaa[x]);
            vbbb.push(vbb[x]);
            vccc.push(vcc[x]);
            iaaa.push(iaa[x]);
            ibbb.push(ibb[x]);
            iccc.push(icc[x]);
        }
    }

    var mode = $(":checked").val();
    if (mode == 'phase')
        return [
            { label: "Voltage", data: vaaa, color: 2, yaxis: 1 },
            { label: "dA/dt", data: iaaa, color: "#0033FF", yaxis: 2 },
            { label: "Voltage", data: vbbb, color: 2, yaxis: 1 },
            { label: "dA/dt", data: ibbb, color: "#0033FF", yaxis: 2 },
            { label: "Voltage", data: vccc, color: 2, yaxis: 1 },
            { label: "dA/dt", data: iccc, color: "#0033FF", yaxis: 2 }
        ];
    else {
        return [
            { label: "Phase A", data: vaaa, color: 2 },
            { label: "Phase B", data: vbbb, color: "#0033FF" },
            { label: "Phase C", data: vccc, color: 3 },
            { label: "Phase A", data: iaaa, color: 2 },
            { label: "Phase B", data: ibbb, color: "#0033FF" },
            { label: "Phase C", data: iccc, color: 3 }
        ];
    }
}

function getFaultDataFM(x1, x2, v, i, iFault) {
    var va = [];
    var ia = [];
    var iFaulta = [];

    for (x in v) {
        var index = v[x][0];
        if (index > x1 && index < x2) {
            va.push(v[x]);
            ia.push(i[x]);
            iFaulta.push(iFault[x]);
        }
    }

    var mode = $(":checked").val();
    if (mode == 'overlay')
        return [
            { label: "Voltage", data: va, color: 2, yaxis: 1 },
            { label: "Current", data: ia, color: "#0033FF", yaxis: 2 },
            { label: "Fault Current", data: iFaulta, color: "#F25C05", yaxis: 3 }
        ];
    else {
        return [
            { label: "Voltage", data: va, color: 2 },
            { label: "Current", data: ia, color: "#0033FF" },
            { label: "Fault Current", data: iFaulta, color: "#F25C05" }

        ];
    }
}

function faultZoom3TM(vaa, vbb, vcc, iaa, ibb, icc) {
    $("#fault_plotA").bind("plotselected", function(event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 10)
            ranges.xaxis.to = ranges.xaxis.from + 10;
        if (ranges.yaxis.to - ranges.yaxis.from < 10)
            ranges.yaxis.to = ranges.yaxis.from + 10;

        // do the zooming
        var data = getFaultDataTM(ranges.xaxis.from, ranges.xaxis.to, vaa, vbb, vcc, iaa, ibb, icc);
        var plot2data = new Array();
        plot2data[0] = data[0];
        plot2data[1] = data[1];
        optionsA.legend.container = '#legendcontainerA';
        plot2 = $.plot($("#fault_plotA"), plot2data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));

        var plot3data = new Array();
        plot3data[0] = data[2];
        plot3data[1] = data[3];
        optionsA.legend.container = '#legendcontainerB';
        plot3 = $.plot($("#fault_plotB"), plot3data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));

        var plot4data = new Array();
        plot4data[0] = data[4];
        plot4data[1] = data[5];
        optionsA.legend.container = '#legendcontainerC';
        plot4 = $.plot($("#fault_plotC"), plot4data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));

    });

    $("#fault_plotB").bind("plotselected", function(event, ranges) {
        var mode = $(":checked").val();
        // clamp the zooming to prevent eternal zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 10)
            ranges.xaxis.to = ranges.xaxis.from + 10;
        if (ranges.yaxis.to - ranges.yaxis.from < 10)
            ranges.yaxis.to = ranges.yaxis.from + 10;

        // do the zooming
        var data = getFaultDataTM(ranges.xaxis.from, ranges.xaxis.to, vaa, vbb, vcc, iaa, ibb, icc);
        var plot2data = new Array();
        plot2data[0] = data[0];
        plot2data[1] = data[1];

        optionsA.legend.container = '#legendcontainerA';
        plot2 = $.plot($("#fault_plotA"), plot2data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));
        var plot3data = new Array();
        plot3data[0] = data[2];
        plot3data[1] = data[3];

        optionsA.legend.container = '#legendcontainerB';
        plot3 = $.plot($("#fault_plotB"), plot3data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));

        var plot4data = new Array();
        plot4data[0] = data[4];
        plot4data[1] = data[5];
        optionsA.legend.container = '#legendcontainerC';
        plot4 = $.plot($("#fault_plotC"), plot4data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));
    });

    $("#fault_plotC").bind("plotselected", function(event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 10)
            ranges.xaxis.to = ranges.xaxis.from + 10;
        if (ranges.yaxis.to - ranges.yaxis.from < 10)
            ranges.yaxis.to = ranges.yaxis.from + 10;

        // do the zooming
        var data = getFaultDataTM(ranges.xaxis.from, ranges.xaxis.to, vaa, vbb, vcc, iaa, ibb, icc);
        var plot2data = new Array();
        plot2data[0] = data[0];
        plot2data[1] = data[1];
        optionsA.legend.container = '#legendcontainerA';
        plot2 = $.plot($("#fault_plotA"), plot2data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));
        var plot3data = new Array();
        plot3data[0] = data[2];
        plot3data[1] = data[3];
        optionsA.legend.container = '#legendcontainerB';
        plot3 = $.plot($("#fault_plotB"), plot3data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));
        var plot4data = new Array();
        plot4data[0] = data[4];
        plot4data[1] = data[5];
        optionsA.legend.container = '#legendcontainerC';
        plot4 = $.plot($("#fault_plotC"), plot4data,
            $.extend(true, {}, optionsA, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));
    });
}

function faultZoom3FM(v, i, iFault) {
    $("#voltage_plot").bind("plotselected", function(event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (Math.abs(ranges.xaxis.to - ranges.xaxis.from) < 2) {
            plot2.clearSelection();
            return;
        }
        // do the zooming
        var data = getFaultDataFM(ranges.xaxis.from, ranges.xaxis.to, v, i, iFault);
        var plot1data = new Array();
        plot1data[0] = data[0];
        optionsB.legend.container = '#legendcontainerB';
        plot2 = $.plot($("#voltage_plot"), plot1data,
            $.extend(true, {}, optionsB));

        var plot2data = new Array();
        plot2data[0] = data[1];
        optionsB.legend.container = '#legendcontainerC';
        plot3 = $.plot($("#current_plot"), plot2data,
            $.extend(true, {}, optionsB));

        var plot3data = new Array();
        plot3data[0] = data[2];
        optionsB.legend.container = '#legendcontainerD';
        plot4 = $.plot($("#fault_current_plot"), plot3data,
            $.extend(true, {}, optionsB));
    });

    $("#current_plot").bind("plotselected", function(event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (Math.abs(ranges.xaxis.to - ranges.xaxis.from) < 2) {
            plot3.clearSelection();
            return;
        }
        // do the zooming
        var data = getFaultDataFM(ranges.xaxis.from, ranges.xaxis.to, v, i, iFault);

        var plot1data = new Array();
        plot1data[0] = data[0];
        optionsB.legend.container = '#legendcontainerB';
        plot2 = $.plot($("#voltage_plot"), plot1data,
            $.extend(true, {}, optionsB));

        var plot2data = new Array();
        plot2data[0] = data[1];
        optionsB.legend.container = '#legendcontainerC';
        plot3 = $.plot($("#current_plot"), plot2data,
            $.extend(true, {}, optionsB));

        var plot3data = new Array();
        plot3data[0] = data[2];
        optionsB.legend.container = '#legendcontainerD';
        plot4 = $.plot($("#fault_current_plot"), plot3data,
            $.extend(true, {}, optionsB));
    });

    $("#fault_current_plot").bind("plotselected", function(event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (Math.abs(ranges.xaxis.to - ranges.xaxis.from) < 2) {
            plot4.clearSelection();
            return;
        }

        // do the zooming
        var data = getFaultDataFM(ranges.xaxis.from, ranges.xaxis.to, v, i, iFault);
        var plot1data = new Array();
        plot1data[0] = data[0];
        optionsB.legend.container = '#legendcontainerB';
        plot2 = $.plot($("#voltage_plot"), plot1data,
            $.extend(true, {}, optionsB));

        var plot2data = new Array();
        plot2data[0] = data[1];
        optionsB.legend.container = '#legendcontainerC';
        plot3 = $.plot($("#current_plot"), plot2data,
            $.extend(true, {}, optionsB));

        var plot3data = new Array();
        plot3data[0] = data[2];
        optionsB.legend.container = '#legendcontainerD';
        plot4 = $.plot($("#fault_current_plot"), plot3data,
            $.extend(true, {}, optionsB));
    });

    $("#fault_current_plot").dblclick(function() {
        optionsB.legend.container = '#legendcontainerB';
        plot2 = $.plot($("#voltage_plot"), [
            { label: "Voltage", data: voltage2, color: 2 }
        ], optionsB);

        optionsB.legend.container = '#legendcontainerC';
        plot3 = $.plot($("#current_plot"), [
            { label: "Current", data: current2, color: "#0033FF" }
        ], optionsB);

        optionsB.legend.container = '#legendContainerD';
        plot4 = $.plot($("#fault_current_plot"), [
            { label: "Fault Current", data: faultCurrent2, color: "#F25C05" }
        ], optionsB);
    });

    $("#voltage_plot").dblclick(function() {
        optionsB.legend.container = '#legendcontainerB';
        plot2 = $.plot($("#voltage_plot"), [
            { label: "Voltage", data: voltage2, color: 2 }
        ], optionsB);

        optionsB.legend.container = '#legendcontainerC';
        plot3 = $.plot($("#current_plot"), [
            { label: "Current", data: current2, color: "#0033FF" }
        ], optionsB);

        optionsB.legend.container = '#legendContainerD';
        plot4 = $.plot($("#fault_current_plot"), [
            { label: "Fault Current", data: faultCurrent2, color: "#F25C05" }
        ], optionsB);
    });

    $("#current_plot").dblclick(function() {
        optionsB.legend.container = '#legendcontainerB';
        plot2 = $.plot($("#voltage_plot"), [
            { label: "Voltage", data: voltage2, color: 2 }
        ], optionsB);

        optionsB.legend.container = '#legendcontainerC';
        plot3 = $.plot($("#current_plot"), [
            { label: "Current", data: current2, color: "#0033FF" }
        ], optionsB);

        optionsB.legend.container = '#legendContainerD';
        plot4 = $.plot($("#fault_current_plot"), [
            { label: "Fault Current", data: faultCurrent2, color: "#F25C05" }
        ], optionsB);
    });
}

function faultZoom2TM(vaa, vbb, vcc, iaa, ibb, icc) {
    $("#fault_plot_voltage").bind("plotselected", function(event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 10)
            ranges.xaxis.to = ranges.xaxis.from + 10;
        if (ranges.yaxis.to - ranges.yaxis.from < 10)
            ranges.yaxis.to = ranges.yaxis.from + 10;

        // do the zooming
        var data = getFaultDataTM(ranges.xaxis.from, ranges.xaxis.to, vaa, vbb, vcc, iaa, ibb, icc);
        var plot1data = new Array();
        plot1data[0] = data[0];
        plot1data[1] = data[1];
        plot1data[2] = data[2];
        optionsB.legend.container = '#legendcontainerVoltage';
        plot1 = $.plot($("#fault_plot_voltage"), plot1data,
            $.extend(true, {}, optionsB, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));

        var plot2data = new Array();
        plot2data[0] = data[3];
        plot2data[1] = data[4];
        plot2data[2] = data[5];
        optionsB.legend.container = '#legendcontainerCurrent';
        plot2 = $.plot($("#fault_plot_current"), plot2data,
            $.extend(true, {}, optionsB, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));
    });

    $("#fault_plot_current").bind("plotselected", function(event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 10)
            ranges.xaxis.to = ranges.xaxis.from + 10;
        if (ranges.yaxis.to - ranges.yaxis.from < 10)
            ranges.yaxis.to = ranges.yaxis.from + 10;

        // do the zooming
        var data = getFaultDataTM(ranges.xaxis.from, ranges.xaxis.to, vaa, vbb, vcc, iaa, ibb, icc);
        var plot1data = new Array();
        plot1data[0] = data[0];
        plot1data[1] = data[1];
        plot1data[2] = data[2];
        optionsB.legend.container = '#legendcontainerVoltage';
        plot1 = $.plot($("#fault_plot_voltage"), plot1data,
            $.extend(true, {}, optionsB, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));

        var plot2data = new Array();
        plot2data[0] = data[3];
        plot2data[1] = data[4];
        plot2data[2] = data[5];
        optionsB.legend.container = '#legendcontainerCurrent';
        plot2 = $.plot($("#fault_plot_current"), plot2data,
            $.extend(true, {}, optionsB, {
                xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to },
                yaxis: { min: ranges.yaxis.from, max: ranges.yaxis.to }
            }));
    });
}

function faultZoomFM(v, i, iFault) {
    $("#fault_plot").bind("plotselected", function(event, ranges) {
        // clamp the zooming to prevent eternal zoom
        if (Math.abs(ranges.xaxis.to - ranges.xaxis.from) < 2) {
            plot1.clearSelection();
            return;
        }

        // do the zooming
        var data = getFaultDataFM(ranges.xaxis.from, ranges.xaxis.to, v, i, iFault);
        var plot1data = new Array();
        plot1data[0] = data[0];
        plot1data[1] = data[1];
        plot1data[2] = data[2];
        optionsA.legend.container = '#legendcontainerA';

        plot1 = $.plot($("#fault_plot"), plot1data, optionsA);
    });

    $("#fault_plot").dblclick(function() {
        optionsA.legend.container = '#legendcontainerA';
        plot = $.plot($("#fault_plot"), [
            { label: "Current", data: current2, color: "#0033FF", yaxis: 2 },
            { label: "Voltage", data: voltage2, color: 2, yaxis: 1 },
            { label: "Fault Current", data: faultCurrent2, color: "#F25C05", yaxis: 3 }
        ], optionsA);

        // Show fault
        $("#faultHeading").show();
        $("#fault_plot").show();
        $("#legendcontainerA").show();

        // Hide individual plots
        $("#voltagePlotHeading").hide();
        $("#voltage_plot").hide();
        $("#legendcontainerB").hide();
        $("#currentPlotHeading").hide();
        $("#current_plot").hide();
        $("#legendcontainerC").hide();
        $("#faultCurrentHeading").hide();
        $("#fault_current_plot").hide();
        $("#legendContainerD").hide();
    });
}
